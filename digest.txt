Directory structure:
└── YeniParaMobile/
    ├── YeniParaMobile/
    │   ├── AppDelegate.swift
    │   ├── ContentView.swift
    │   ├── Info.plist
    │   ├── YeniParaMobileApp.swift
    │   ├── Assets.xcassets/
    │   │   ├── Contents.json
    │   │   ├── .DS_Store
    │   │   ├── AccentColor.colorset/
    │   │   │   └── Contents.json
    │   │   ├── AppIcon.appiconset/
    │   │   │   └── Contents.json
    │   │   ├── apple-logo.imageset/
    │   │   │   └── Contents.json
    │   │   ├── google-logo.imageset/
    │   │   │   └── Contents.json
    │   │   ├── logo.imageset/
    │   │   │   ├── Contents.json
    │   │   │   └── .DS_Store
    │   │   └── registercomplete.imageset/
    │   │       └── Contents.json
    │   ├── Onboarding/
    │   │   ├── CreatePasswordView.swift
    │   │   ├── EmailVerificationView.swift
    │   │   ├── KVKKView.swift
    │   │   ├── PhoneNumberEntryView.swift
    │   │   ├── ProfileInfoView.swift
    │   │   ├── RegisterComplete.swift
    │   │   ├── RegisterView.swift
    │   │   └── WelcomeView.swift
    │   ├── Utils/
    │   │   └── Validators.swift
    │   ├── ViewModels/
    │   │   └── AuthViewModel.swift
    │   └── Views/
    │       ├── HomeView.swift
    │       ├── SymbolDetailView.swift
    │       ├── TabBarView.swift
    │       └── Common/
    │           ├── ButtonStyle.swift
    │           ├── InputField.swift
    │           ├── LogoView.swift
    │           ├── PrimaryButton.swift
    │           └── SocialButton.swift
    └── YeniParaMobile.xcodeproj/
        ├── project.pbxproj
        ├── project.xcworkspace/
        │   ├── contents.xcworkspacedata
        │   ├── xcshareddata/
        │   │   └── swiftpm/
        │   │       ├── Package.resolved
        │   │       └── configuration/
        │   └── xcuserdata/
        │       └── fevzisahinler.xcuserdatad/
        └── xcuserdata/
            └── fevzisahinler.xcuserdatad/
                └── xcschemes/
                    └── xcschememanagement.plist

================================================
File: YeniParaMobile/AppDelegate.swift
================================================
import UIKit
import GoogleSignIn

class AppDelegate: NSObject, UIApplicationDelegate {
  func application(
    _ app: UIApplication,
    open url: URL,
    options: [UIApplication.OpenURLOptionsKey : Any] = [:]
  ) -> Bool {
    return GIDSignIn.sharedInstance.handle(url)
  }
}



================================================
File: YeniParaMobile/ContentView.swift
================================================

import SwiftUI

struct ContentView: View {
    @ObservedObject var authVM: AuthViewModel

    var body: some View {
        Group {
            if authVM.isLoggedIn {
                TabBarView(authVM: authVM)
            } else {
                WelcomeView(authVM: authVM)
            }
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView(authVM: AuthViewModel())
    }
}



================================================
File: YeniParaMobile/Info.plist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>

  <key>CLIENT_ID</key>
  <string>843475939935-6jrkdngl8v0j11vf39ansvjkc7n0qksq.apps.googleusercontent.com</string>
  <key>REVERSED_CLIENT_ID</key>
  <string>com.googleusercontent.apps.843475939935-6jrkdngl8v0j11vf39ansvjkc7n0qksq</string>
  
  <key>CFBundleURLTypes</key>
  <array>
    <dict>
      <key>CFBundleTypeRole</key>
      <string>Editor</string>
      <key>CFBundleURLSchemes</key>
      <array>
        <string>com.googleusercontent.apps.843475939935-6jrkdngl8v0j11vf39ansvjkc7n0qksq</string>
      </array>
    </dict>
  </array>

  <key>NSAppTransportSecurity</key>
  <dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
    <key>NSAllowsArbitraryLoadsInWebContent</key>
    <true/>
    <key>NSAllowsLocalNetworking</key>
    <true/>

    <key>NSExceptionDomains</key>
    <dict>
      <key>127.0.0.1</key>
      <dict>
        <key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key>
        <true/>
      </dict>
      <key>localhost</key>
      <dict>
        <key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key>
        <true/>
      </dict>
      <key>192.168.1.210</key>
      <dict>
        <key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key>
        <true/>
      </dict>
    </dict>
  </dict>

  <key>NSLocalNetworkUsageDescription</key>
  <string>Uygulama yerel sunucudan veri çekebilmek için yerel ağa bağlanır.</string>


</dict>
</plist>



================================================
File: YeniParaMobile/YeniParaMobileApp.swift
================================================
import SwiftUI

@main
struct YeniParaMobileApp: App {
    @UIApplicationDelegateAdaptor(AppDelegate.self) var delegate
    @StateObject private var authVM = AuthViewModel()
    
    var body: some Scene {
        WindowGroup {
            NavigationStack {
                WelcomeView(authVM: authVM)
                    .navigationBarHidden(true)
            }
        }
    }
}



================================================
File: YeniParaMobile/Assets.xcassets/Contents.json
================================================
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}



================================================
File: YeniParaMobile/Assets.xcassets/.DS_Store
================================================
[Non-text file]


================================================
File: YeniParaMobile/Assets.xcassets/AccentColor.colorset/Contents.json
================================================
{
  "colors" : [
    {
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}



================================================
File: YeniParaMobile/Assets.xcassets/AppIcon.appiconset/Contents.json
================================================
{
  "images" : [
    {
      "idiom" : "universal",
      "platform" : "ios",
      "size" : "1024x1024"
    },
    {
      "appearances" : [
        {
          "appearance" : "luminosity",
          "value" : "dark"
        }
      ],
      "idiom" : "universal",
      "platform" : "ios",
      "size" : "1024x1024"
    },
    {
      "appearances" : [
        {
          "appearance" : "luminosity",
          "value" : "tinted"
        }
      ],
      "idiom" : "universal",
      "platform" : "ios",
      "size" : "1024x1024"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}



================================================
File: YeniParaMobile/Assets.xcassets/apple-logo.imageset/Contents.json
================================================
{
  "images" : [
    {
      "filename" : "apple-logo.svg",
      "idiom" : "universal",
      "scale" : "1x"
    },
    {
      "idiom" : "universal",
      "scale" : "2x"
    },
    {
      "idiom" : "universal",
      "scale" : "3x"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}



================================================
File: YeniParaMobile/Assets.xcassets/google-logo.imageset/Contents.json
================================================
{
  "images" : [
    {
      "filename" : "google-logo.svg",
      "idiom" : "universal",
      "scale" : "1x"
    },
    {
      "idiom" : "universal",
      "scale" : "2x"
    },
    {
      "idiom" : "universal",
      "scale" : "3x"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}



================================================
File: YeniParaMobile/Assets.xcassets/logo.imageset/Contents.json
================================================
{
  "images" : [
    {
      "filename" : "logo.svg",
      "idiom" : "universal",
      "scale" : "1x"
    },
    {
      "idiom" : "universal",
      "scale" : "2x"
    },
    {
      "idiom" : "universal",
      "scale" : "3x"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}



================================================
File: YeniParaMobile/Assets.xcassets/logo.imageset/.DS_Store
================================================
[Non-text file]


================================================
File: YeniParaMobile/Assets.xcassets/registercomplete.imageset/Contents.json
================================================
{
  "images" : [
    {
      "filename" : "registercomplete.png",
      "idiom" : "universal",
      "scale" : "1x"
    },
    {
      "idiom" : "universal",
      "scale" : "2x"
    },
    {
      "idiom" : "universal",
      "scale" : "3x"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}



================================================
File: YeniParaMobile/Onboarding/CreatePasswordView.swift
================================================
import SwiftUI

struct CreatePasswordView: View {
    @Environment(\.dismiss) private var dismiss
    @ObservedObject var authVM: AuthViewModel

    @State private var password: String = ""
    @State private var confirmPassword: String = ""
    @State private var isPasswordVisible: Bool = false
    @State private var isConfirmVisible: Bool = false
    @State private var acceptedTerms: Bool = false

    @State private var navigateToOTP = false

    private var isValidPassword: Bool {
        password.count >= 8 &&
        password.range(of: "[A-Z]", options: .regularExpression) != nil &&
        password.range(of: "[0-9]", options: .regularExpression) != nil
    }

    private var canSubmit: Bool {
        isValidPassword && (password == confirmPassword) && acceptedTerms
    }

    var body: some View {
        ZStack {
            Color(red: 28/255, green: 29/255, blue: 36/255).ignoresSafeArea()

            VStack(spacing: 24) {
                HStack {
                    Button { dismiss() } label: {
                        Image(systemName: "chevron.left")
                            .font(.title2)
                            .foregroundColor(.white)
                    }
                    Spacer()
                }
                .padding(.top, 12)
                .padding(.horizontal, 24)

                Image("logo")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 60, height: 60)

                Text("Şifre oluşturun")
                    .font(.largeTitle).bold()
                    .foregroundColor(.white)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 24)

                Text("Güvenli bir şifre seçin\n(En az 8 karakter, 1 büyük harf ve 1 rakam içermelidir)")
                    .font(.subheadline)
                    .foregroundColor(.white.opacity(0.7))
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 24)

                VStack(spacing: 16) {
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Şifre")
                            .font(.footnote)
                            .foregroundColor(.white.opacity(0.7))
                        HStack {
                            Group {
                                if isPasswordVisible {
                                    TextField("••••••••", text: $password)
                                } else {
                                    SecureField("••••••••", text: $password)
                                }
                            }
                            .autocapitalization(.none)
                            .textContentType(.newPassword)
                            .foregroundColor(.white)
                            Button {
                                isPasswordVisible.toggle()
                            } label: {
                                Image(systemName: isPasswordVisible ? "eye" : "eye.slash")
                                    .foregroundColor(.white.opacity(0.7))
                            }
                        }
                        .padding(.vertical, 12)
                        .padding(.horizontal, 16)
                        .background(Color.white.opacity(0.1))
                        .cornerRadius(8)
                    }

                    VStack(alignment: .leading, spacing: 8) {
                        Text("Şifrenizi tekrar giriniz")
                            .font(.footnote)
                            .foregroundColor(.white.opacity(0.7))
                        HStack {
                            Group {
                                if isConfirmVisible {
                                    TextField("••••••••", text: $confirmPassword)
                                } else {
                                    SecureField("••••••••", text: $confirmPassword)
                                }
                            }
                            .autocapitalization(.none)
                            .textContentType(.password)
                            .foregroundColor(.white)
                            Button {
                                isConfirmVisible.toggle()
                            } label: {
                                Image(systemName: isConfirmVisible ? "eye" : "eye.slash")
                                    .foregroundColor(.white.opacity(0.7))
                            }
                        }
                        .padding(.vertical, 12)
                        .padding(.horizontal, 16)
                        .background(Color.white.opacity(0.1))
                        .cornerRadius(8)
                    }

                    HStack(alignment: .top, spacing: 8) {
                        Button {
                            acceptedTerms.toggle()
                        } label: {
                            Image(systemName: acceptedTerms ? "checkmark.square.fill" : "square")
                                .foregroundColor(.white)
                        }
                        NavigationLink {
                            KVKKView()
                        } label: {
                            Text("Kullanıcı sözleşmesini ve KVKK aydınlatma metnini kabul ediyorum.")
                                .font(.footnote)
                                .underline()
                                .foregroundColor(.white)
                        }
                    }
                }
                .padding(.horizontal, 24)

                Spacer()

                NavigationLink(
                    destination: EmailVerificationView(authVM: authVM),
                    isActive: $navigateToOTP
                ) { EmptyView() }

                PrimaryButton(
                    title: "Tamamla",
                    action: {
                        Task {
                            authVM.newUserPassword = password
                            await authVM.registerUser()

                            if authVM.registeredUserID != nil {
                                navigateToOTP = true
                            } else {
                            }
                        }
                    },
                    background: Color(red: 143/255, green: 217/255, blue: 83/255),
                    foreground: .white
                )
                .disabled(!canSubmit)
                .frame(height: 48)
                .padding(.horizontal, 12)

                Spacer(minLength: 20)
            }
        }
        .navigationBarBackButtonHidden(true)
    }
}

struct CreatePasswordView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationStack {
            CreatePasswordView(authVM: AuthViewModel())
        }
    }
}



================================================
File: YeniParaMobile/Onboarding/EmailVerificationView.swift
================================================
import SwiftUI

struct EmailVerificationView: View {
    @Environment(\.dismiss) private var dismiss
    
    @ObservedObject var authVM: AuthViewModel
    
    @State private var code: [String] = Array(repeating: "", count: 6)
    @FocusState private var focusIndex: Int?
    
    @State private var timeRemaining: Int = 60
    @State private var resendAvailable: Bool = false
    @State private var showRegisterComplete: Bool = false

    private var isComplete: Bool {
        code.allSatisfy { $0.count == 1 && $0.first!.isNumber }
    }

    var body: some View {
        ZStack {
            Color(red: 28/255, green: 29/255, blue: 36/255)
                .ignoresSafeArea()

            VStack(spacing: 32) {
                HStack {
                    Button { dismiss() } label: {
                        Image(systemName: "chevron.left")
                            .font(.title2)
                            .foregroundColor(.white)
                    }
                    Spacer()
                }
                .padding(.horizontal, 24)
                .padding(.top, 12)

                Image("logo")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 60, height: 60)

                Text("E‑posta adresinizi doğrulayın")
                    .font(.largeTitle).bold()
                    .foregroundColor(.white)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 24)

                if authVM.registeredUserID != nil {
                    VStack(spacing: 4) {
                        Text(authVM.newUserEmail)
                            .font(.subheadline)
                            .foregroundColor(.white)
                        Text("adresine gönderilen doğrulama kodunu girin")
                            .font(.footnote)
                            .foregroundColor(.white.opacity(0.7))
                    }
                }

                HStack(spacing: 12) {
                    ForEach(0..<6) { i in
                        TextField("", text: $code[i])
                            .keyboardType(.numberPad)
                            .multilineTextAlignment(.center)
                            .font(.title2)
                            .frame(width: 45, height: 55)
                            .background(Color.white.opacity(0.1))
                            .cornerRadius(8)
                            .foregroundColor(.white)
                            .focused($focusIndex, equals: i)
                            .onChange(of: code[i]) { newValue in
                                if let ch = newValue.first, ch.isNumber {
                                    code[i] = String(ch)
                                    if i < 5 {
                                        focusIndex = i + 1
                                    } else {
                                        focusIndex = nil
                                    }
                                } else {
                                    code[i] = ""
                                }
                            }
                    }
                }

                PrimaryButton(
                    title: "Doğrula",
                    action: {
                        Task {
                            let otpString = code.joined()
                            let success = await authVM.verifyEmail(otpCode: otpString)
                            if success {
                                showRegisterComplete = true
                            } else {
                            }
                        }
                    },
                    background: Color(red: 143/255, green: 217/255, blue: 83/255),
                    foreground: .white
                )
                .disabled(!isComplete)
                .frame(height: 48)
                .padding(.horizontal, 24)

                if !resendAvailable {
                    Text("Yeniden göndermek için \(timeRemaining) saniye")
                        .foregroundColor(.white.opacity(0.7))
                } else {
                    Button {
                        Task {
                            await authVM.resendOTP()
                            timeRemaining = 60
                            resendAvailable = false
                        }
                    } label: {
                        Text("Kodu yeniden gönder")
                            .underline()
                            .foregroundColor(.white)
                    }
                }

                Spacer()
            }
        }
        .navigationBarBackButtonHidden(true)
        .onAppear {
            focusIndex = 0
            startTimer()
        }
        .navigationDestination(isPresented: $showRegisterComplete) {
            RegisterCompleteView(
                onStart: { },
                onLater: {}
            )
        }
    }

    private func startTimer() {
        timeRemaining = 60
        resendAvailable = false

        Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { timer in
            if timeRemaining > 0 {
                timeRemaining -= 1
            } else {
                timer.invalidate()
                resendAvailable = true
            }
        }
    }
}

struct EmailVerificationView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationStack {
            EmailVerificationView(authVM: AuthViewModel())
        }
    }
}



================================================
File: YeniParaMobile/Onboarding/KVKKView.swift
================================================
import SwiftUI

struct KVKKView: View {
    @Environment(\ .dismiss) private var dismiss
    @State private var hasScrolledToBottom: Bool = false

    private let kvkkText: String = """
6698 sayılı Kişisel Verilerin Korunması Kanunu, 07.04.2016 tarih ve 29677 sayılı Resmî Gazete’de yayımlanarak yürürlüğe girmiştir. Uluslararası belgeler, müktesebî hukuk uygulamaları ve ülkemiz ihtiyaçları göz önüne alınmak suretiyle hazırlanan Kanun ile kişisel verilerin çağdaş standartlarda işlenmesi ve koruma altına alınması amaçlanmaktadır. ...

Bu metni okudum, anladım ve tüm koşulları kabul ediyorum.
"""

    var body: some View {
        ZStack {
            Color(red: 28/255, green: 29/255, blue: 36/255)
                .ignoresSafeArea()

            VStack(spacing: 0) {
                HStack {
                    Button {
                        dismiss()
                    } label: {
                        Image(systemName: "chevron.left")
                            .font(.title2)
                            .foregroundColor(.white)
                    }
                    Spacer()
                }
                .padding(.horizontal, 24)
                .padding(.top, 12)

                Text("Sözleşme ve KVKK Aydınlatma Metni")
                    .font(.title2).bold()
                    .foregroundColor(.white)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 24)
                    .padding(.top, 8)

                ScrollView {
                    VStack(alignment: .leading, spacing: 0) {
                        Text(kvkkText)
                            .font(.body)
                            .foregroundColor(.white)
                            .multilineTextAlignment(.leading)
                            .padding(24)
                        Text("")
                            .frame(height: 1)
                            .onAppear {
                                hasScrolledToBottom = true
                            }
                    }
                }

                PrimaryButton(
                    title: "Kabul Ediyorum",
                    action: { dismiss() },
                    background: Color(red: 143/255, green: 217/255, blue: 83/255),
                    foreground: .white
                )
                .disabled(!hasScrolledToBottom)
                .opacity(hasScrolledToBottom ? 1 : 0.5)
                .frame(height: 48)
                .padding(.horizontal, 24)
                .padding(.vertical, 16)
            }
        }
        .navigationBarBackButtonHidden(true)
    }
}

struct KVKKView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationStack {
            KVKKView()
        }
    }
}



================================================
File: YeniParaMobile/Onboarding/PhoneNumberEntryView.swift
================================================
import SwiftUI

struct PhoneNumberEntryView: View {
    @Environment(\.dismiss) private var dismiss
    
    @State private var phone: String = ""
    @FocusState private var focusedField: Bool
    @State private var acceptedTerms: Bool = false
    
    var onSubmit: (String) -> Void

    private var isValidPhone: Bool {
        phone.filter(\.isNumber).count == 10
    }

    var body: some View {
        ZStack {
            Color(red: 28/255, green: 29/255, blue: 36/255)
                .ignoresSafeArea()

            VStack(spacing: 24) {
                HStack {
                    Button {
                        dismiss()
                    } label: {
                        Image(systemName: "chevron.left")
                            .font(.title2)
                            .foregroundColor(.white)
                    }
                    Spacer()
                }
                .padding(.horizontal, 24)
                .padding(.top, 12)

                Image("logo")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 60, height: 60)

                Text("Telefon Numaranızı Girin")
                    .font(.largeTitle).bold()
                    .foregroundColor(.white)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 24)

                Text("Güvenlik ve doğrulama için telefon numaranızı giriniz.")
                    .font(.subheadline)
                    .foregroundColor(.white.opacity(0.7))
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 40)

                VStack(alignment: .leading, spacing: 8) {
                    Text("Telefon Numarası")
                        .font(.footnote)
                        .foregroundColor(.white.opacity(0.7))
                        .padding(.horizontal, 24)

                    TextField("(___) ___ __ __", text: $phone)
                        .keyboardType(.numberPad)
                        .focused($focusedField)
                        .padding(.vertical, 12)
                        .padding(.horizontal, 16)
                        .background(Color.white.opacity(0.1))
                        .foregroundColor(.white)
                        .cornerRadius(8)
                        .padding(.horizontal, 24)
                        .onChange(of: phone) { newValue in
                            var digits = newValue.filter(\.isNumber)
                            if digits.count > 10 {
                                digits = String(digits.prefix(10))
                            }
                            var formatted = ""
                            for (i, ch) in digits.enumerated() {
                                if i == 0 { formatted += "(" }
                                if i == 3 { formatted += ") " }
                                if i == 6 { formatted += " " }
                                if i == 8 { formatted += " " }
                                formatted.append(ch)
                            }
                            phone = formatted
                        }
                }

                HStack(alignment: .top, spacing: 8) {
                    Button {
                        acceptedTerms.toggle()
                    } label: {
                        Image(systemName: acceptedTerms ? "checkmark.square.fill" : "square")
                            .foregroundColor(.white)
                    }

                    NavigationLink {
                        KVKKView()
                    } label: {
                        Text("Kullanıcı sözleşmesini ve KVKK aydınlatma metnini kabul ediyorum.")
                            .font(.footnote)
                            .underline()
                            .foregroundColor(.white)
                    }
                }

                Button(action: {
                    onSubmit(phone)
                }) {
                    Text("İleri")
                        .font(.headline)
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity)
                        .frame(height: 48)
                        .background(
                            isValidPhone && acceptedTerms
                                ? Color(red: 143/255, green: 217/255, blue: 83/255)
                                : Color.gray
                        )
                        .cornerRadius(8)
                }
                .disabled(!isValidPhone || !acceptedTerms)
                .padding(.horizontal, 24)

                Spacer()
            }
        }
        .navigationBarBackButtonHidden(true)
        .onAppear {
            focusedField = true
        }
    }
}



================================================
File: YeniParaMobile/Onboarding/ProfileInfoView.swift
================================================
import SwiftUI

struct ProfileInfoView: View {
    @Environment(\.dismiss) private var dismiss
    @ObservedObject var authVM: AuthViewModel

    @FocusState private var focusedField: Field?
    private enum Field: Hashable {
        case fullName, username, phone
    }

    private let countryOptions: [(code: String, flag: String)] = [
        ("+90", "🇹🇷"),
        ("+1",  "🇺🇸"),
        ("+44", "🇬🇧"),
        ("+49", "🇩🇪"),
        ("+33", "🇫🇷")
    ]

    @State private var countryCode: String = "+90"
    
    private var isFormValid: Bool {
        !authVM.newUserFullName.trimmingCharacters(in: .whitespaces).isEmpty &&
        !authVM.newUserUsername.trimmingCharacters(in: .whitespaces).isEmpty &&
        authVM.newUserPhoneNumber.filter(\.isNumber).count == 11
    }

    var body: some View {
        ZStack {
            Color(red: 28/255, green: 29/255, blue: 36/255).ignoresSafeArea()

            VStack(spacing: 24) {
                HStack {
                    Button { dismiss() } label: {
                        Image(systemName: "chevron.left")
                            .font(.title2)
                            .foregroundColor(.white)
                    }
                    Spacer()
                }
                .padding(.horizontal, 24)
                .padding(.top, 12)

                Image("logo")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 60, height: 60)

                Text("Sizi Tanıyalım")
                    .font(.largeTitle).bold()
                    .foregroundColor(.white)

                Text("Profilinizi oluşturmak için ihtiyacımız olan bilgiler")
                    .font(.subheadline)
                    .foregroundColor(.white.opacity(0.7))
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 24)

                VStack(alignment: .leading, spacing: 16) {
                    Text("İsim & Soyisim")
                        .font(.footnote)
                        .foregroundColor(.white.opacity(0.7))
                    InputField(text: $authVM.newUserFullName, placeholder: "__ ________")
                        .textContentType(.name)
                        .autocapitalization(.words)
                        .focused($focusedField, equals: .fullName)

                    Text("Kullanıcı Adı")
                        .font(.footnote)
                        .foregroundColor(.white.opacity(0.7))
                    InputField(text: $authVM.newUserUsername, placeholder: "____.___")
                        .textContentType(.username)
                        .autocapitalization(.none)
                        .focused($focusedField, equals: .username)

                    Text("Telefon Numarası")
                        .font(.footnote)
                        .foregroundColor(.white.opacity(0.7))

                    HStack(spacing: 8) {
                        Menu {
                            ForEach(countryOptions, id: \.code) { option in
                                Button {
                                    countryCode = option.code
                                } label: {
                                    Text("\(option.flag) \(option.code)")
                                }
                            }
                        } label: {
                            HStack(spacing: 4) {
                                Text(countryOptions.first { $0.code == countryCode }?.flag ?? "")
                                Text(countryCode)
                            }
                            .padding(.vertical, 12)
                            .padding(.horizontal, 8)
                            .background(Color.white.opacity(0.1))
                            .cornerRadius(8)
                            .foregroundColor(.white)
                        }

                        InputField(text: $authVM.newUserPhoneNumber, placeholder: "(___) ___ __ __")
                            .keyboardType(.phonePad)
                            .textContentType(.telephoneNumber)
                            .focused($focusedField, equals: .phone)
                            .onChange(of: authVM.newUserPhoneNumber) { newValue in
                                var digits = newValue.filter(\.isNumber)
                                if digits.count > 11 {
                                    digits = String(digits.prefix(11))
                                }
                                var result = ""
                                for (i, c) in digits.enumerated() {
                                    if i == 0 { result += "(" }
                                    if i == 3 { result += ") " }
                                    if i == 6 { result += " " }
                                    if i == 8 { result += " " }
                                    result.append(c)
                                }
                                authVM.newUserPhoneNumber = result
                            }
                    }
                }
                .padding(.horizontal, 24)

                NavigationLink(
                    destination: CreatePasswordView(authVM: authVM),
                    label: {
                        PrimaryButton(
                            title: "İleri",
                            action: { },
                            background: Color(red: 143/255, green: 217/255, blue: 83/255),
                            foreground: .white
                        )
                        .frame(height: 48)
                        .padding(.horizontal, 24)
                        .disabled(!isFormValid)
                    }
                )

                Spacer()
            }
        }
        .navigationBarBackButtonHidden(true)
    }
}

struct ProfileInfoView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationStack {
            ProfileInfoView(authVM: AuthViewModel())
        }
    }
}



================================================
File: YeniParaMobile/Onboarding/RegisterComplete.swift
================================================
import SwiftUI

struct RegisterCompleteView: View {
    var onStart: () -> Void
    var onLater: () -> Void

    var body: some View {
        ZStack {
            Color(red: 28/255, green: 29/255, blue: 36/255)
                .ignoresSafeArea()

            VStack(spacing: 24) {
                Spacer().frame(height: 40)

                Image(systemName: "checkmark.circle.fill")
                    .font(.system(size: 64))
                    .foregroundColor(Color(red: 143/255, green: 217/255, blue: 83/255))

                Text("Kayıt Başarıyla Tamamlandı")
                    .font(.title)
                    .bold()
                    .foregroundColor(.white)
                    .multilineTextAlignment(.center)

                Text("Sizin için en uygun yatırım profilini belirlemek üzere birkaç sorumuz var.")
                    .font(.subheadline)
                    .foregroundColor(.white.opacity(0.7))
                    .multilineTextAlignment(.center)
                    .padding(.horizontal, 24)

                Image("registercomplete")
                    .resizable()
                    .scaledToFit()
                    .frame(maxWidth: 200, maxHeight: 200)

                PrimaryButton(
                    title: "Başla",
                    action: onStart,
                    background: Color(red: 143/255, green: 217/255, blue: 83/255),
                    foreground: .white
                )
                .frame(height: 48)
                .padding(.horizontal, 24)

                Text("Yaklaşık 1 dakikanızı alacak")
                    .font(.footnote)
                    .foregroundColor(.white.opacity(0.7))

                Button(action: onLater) {
                    Text("Daha sonra tamamla")
                        .font(.footnote)
                        .underline()
                        .foregroundColor(.white.opacity(0.7))
                }

                Spacer()
            }
        }
        .navigationBarHidden(true)
    }
}

struct RegisterCompleteView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationStack {
            RegisterCompleteView(
                onStart: {},
                onLater: {}
            )
        }
    }
}



================================================
File: YeniParaMobile/Onboarding/RegisterView.swift
================================================
import SwiftUI

struct RegisterView: View {
    @State private var goToProfileInfo = false
    @ObservedObject var authVM: AuthViewModel
    
    var body: some View {
        NavigationStack {
            ZStack {
                Color(red: 28/255, green: 29/255, blue: 36/255)
                    .ignoresSafeArea()
                
                VStack(spacing: 24) {
                    Spacer().frame(height: 40)

                    Image("logo")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 60, height: 60)

                    Text("Hesap oluşturun")
                        .font(.largeTitle).bold()
                        .foregroundColor(.white)
                    
                    Text("E‑Posta adresiniz ile kaydolun.")
                        .font(.subheadline)
                        .foregroundColor(Color.white.opacity(0.7))
                    
                    VStack(spacing: 16) {
                        SocialButton(
                            imageName: "google-logo",
                            title: "Google ile devam et",
                            action: authVM.signInWithGoogle
                        )
                    }
                    .padding(.horizontal, 24)

                    HStack {
                        Rectangle()
                            .fill(Color.white.opacity(0.3))
                            .frame(height: 1)
                        Text("veya")
                            .font(.footnote)
                            .foregroundColor(Color.white.opacity(0.7))
                            .padding(.horizontal, 8)
                        Rectangle()
                            .fill(Color.white.opacity(0.3))
                            .frame(height: 1)
                    }
                    .padding(.horizontal, 24)

                    VStack(alignment: .leading, spacing: 4) {
                        Text("E‑Posta")
                            .font(.footnote)
                            .foregroundColor(Color.white.opacity(0.7))
                        
                        InputField(
                            text: $authVM.newUserEmail,
                            placeholder: ""
                        )
                    }
                    .padding(.horizontal, 24)
                    
                    NavigationLink(
                        destination: ProfileInfoView(authVM: authVM),
                        isActive: $goToProfileInfo
                    ) { EmptyView() }

                    PrimaryButton(
                        title: "Kayıt Ol",
                        action: {
                            if Validators.isValidEmail(authVM.newUserEmail) {
                                goToProfileInfo = true
                            } else {
                                authVM.emailError = "Geçerli bir e‑posta girin."
                            }
                        },
                        background: Color(red: 111/255, green: 170/255, blue: 12/255),
                        foreground: .white
                    )
                    .disabled(!Validators.isValidEmail(authVM.newUserEmail))
                    .frame(height: 48)
                    .padding(.horizontal, 24)

                    VStack(spacing: 12) {
                        Text("Hesabınız var mı?")
                            .font(.callout)
                            .foregroundColor(Color.white.opacity(0.7))
                        Button(action: {
                            authVM.showRegister = false
                        }) {
                            Text("Giriş Yap")
                                .font(.callout)
                                .fontWeight(.semibold)
                                .foregroundColor(Color(red: 218/255, green: 60/255, blue: 46/255))
                                .underline()
                        }
                    }
                    .padding(.bottom, 24)
                    Spacer()
                }
            }
            .navigationBarHidden(true)
        }
        .fullScreenCover(isPresented: $authVM.showPhoneNumberEntry) {
            PhoneNumberEntryView { phoneEntered in
                Task {
                    guard let userID = authVM.googleProfileIncompleteUserID else { return }
                    let success = await authVM.completeProfile(
                        userID: userID,
                        phoneNumber: phoneEntered
                    )
                    if success {
                        authVM.showPhoneNumberEntry = false
                        authVM.showRegisterComplete = true
                    }
                }
            }
        }
        .fullScreenCover(isPresented: $authVM.showRegisterComplete) {
            RegisterCompleteView(
                onStart: {
                    authVM.showRegisterComplete = false
                },
                onLater: {
                    authVM.showRegisterComplete = false
                }
            )
        }
    }
}



================================================
File: YeniParaMobile/Onboarding/WelcomeView.swift
================================================
import SwiftUI

struct WelcomeView: View {
    @ObservedObject var authVM: AuthViewModel
    
    var body: some View {
        ZStack {
            Color(red: 28/255, green: 29/255, blue: 36/255).ignoresSafeArea()
            VStack(spacing: 24) {
                Spacer().frame(height: 40)
                
                Image("logo")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 60, height: 60)
                
                Text("Hoş geldiniz")
                    .font(.largeTitle).bold()
                    .foregroundColor(.white)
                
                Text("Hesabınıza giriş yapın.")
                    .font(.subheadline)
                    .foregroundColor(Color.white.opacity(0.7))
                
                VStack(spacing: 16) {
                    SocialButton(
                        imageName: "google-logo",
                        title: "Google ile devam et",
                        action: authVM.signInWithGoogle
                    )
                }
                .padding(.horizontal, 24)
                
                HStack {
                    Rectangle()
                        .fill(Color.white.opacity(0.3))
                        .frame(height: 1)
                    Text("veya")
                        .font(.footnote)
                        .foregroundColor(Color.white.opacity(0.7))
                        .padding(.horizontal, 8)
                    Rectangle()
                        .fill(Color.white.opacity(0.3))
                        .frame(height: 1)
                }
                .padding(.horizontal, 24)
                
                VStack(alignment: .leading, spacing: 4) {
                    Text("E‑Posta")
                        .font(.footnote)
                        .foregroundColor(Color.white.opacity(0.7))
                    InputField(
                        text: $authVM.email,
                        placeholder: ""
                    )
                }
                .padding(.horizontal, 24)
                
                PrimaryButton(
                    title: "Giriş Yap",
                    action: { authVM.login() },
                    background: Color(red: 218/255, green: 60/255, blue: 46/255),
                    foreground: .white
                )
                .disabled(!authVM.isEmailValid)
                .frame(height: 48)
                .padding(.horizontal, 24)
                .padding(.top, 16)
                
                VStack(spacing: 12) {
                    Text("Hesabınız yok mu?")
                        .font(.callout)
                        .foregroundColor(Color.white.opacity(0.7))
                    Button(action: {
                        authVM.showRegister = true
                    }) {
                        Text("Kayıt Ol")
                            .font(.callout)
                            .fontWeight(.semibold)
                            .foregroundColor(Color(red: 143/255, green: 217/255, blue: 83/255))
                            .underline()
                    }
                }
                .padding(.bottom, 24)
                Spacer()
            }
        }
        .fullScreenCover(isPresented: $authVM.showRegister) {
            RegisterView(authVM: authVM)
        }
        .fullScreenCover(isPresented: $authVM.showPhoneNumberEntry) {
            PhoneNumberEntryView { phoneEntered in
                Task {
                    guard let userID = authVM.googleProfileIncompleteUserID else { return }
                    let success = await authVM.completeProfile(
                        userID: userID,
                        phoneNumber: phoneEntered
                    )
                    if success {
                        authVM.showPhoneNumberEntry = false
                        authVM.showRegisterComplete = true
                    }
                }
            }
        }
        .fullScreenCover(isPresented: $authVM.showRegisterComplete) {
            RegisterCompleteView(
                onStart: {
                    authVM.showRegisterComplete = false
                },
                onLater: {
                    authVM.showRegisterComplete = false
                }
            )
        }
    }
}



================================================
File: YeniParaMobile/Utils/Validators.swift
================================================
import Foundation

struct Validators {
    static func isValidEmail(_ email: String) -> Bool {
        return email.contains("@") && email.contains(".")
    }
}



================================================
File: YeniParaMobile/ViewModels/AuthViewModel.swift
================================================
import Foundation
import Combine
import SwiftUI
import GoogleSignIn
import UIKit
import AuthenticationServices

@MainActor
final class AuthViewModel: NSObject, ObservableObject {

    @Published var email: String = ""
    @Published var showRegister: Bool = false
    @Published var emailError: String? = nil
    @Published var isLoading: Bool = false
    
    @Published var newUserEmail: String = ""
    @Published var newUserFullName: String = ""
    @Published var newUserUsername: String = ""
    @Published var newUserPhoneNumber: String = ""
    @Published var newUserPassword: String = ""
    
    @Published var registeredUserID: Int?
    
    @Published var googleProfileIncompleteUserID: Int?
    @Published var showPhoneNumberEntry: Bool = false
    @Published var showRegisterComplete: Bool = false
     @Published var isLoggedIn: Bool = false
    
    var isEmailValid: Bool {
        Validators.isValidEmail(email)
    }
    
    func registerUser() async {
        guard let url = URL(string: "http://192.168.1.8:4000/auth/register") else { return }
        
        let requestBody: [String: Any] = [
            "email": newUserEmail,
            "password": newUserPassword,
            "username": newUserUsername,
            "full_name": newUserFullName,
            "phone_number": newUserPhoneNumber
        ]
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: requestBody)
        
        isLoading = true
        defer { isLoading = false }
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            guard let httpResp = response as? HTTPURLResponse else { return }
            print("Register status code:", httpResp.statusCode)
            
            if httpResp.statusCode == 200 || httpResp.statusCode == 201 {
                if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let dataObj = json["data"] as? [String: Any],
                   let userID = dataObj["user_id"] as? Int {
                    self.registeredUserID = userID
                    print("New userID:", userID)
                }
            } else {
                print("Register failed with code \(httpResp.statusCode)")
            }
        } catch {
            print("Register request error:", error)
        }
    }
    
    func login() {
        emailError = nil
        guard !email.trimmingCharacters(in: .whitespaces).isEmpty else {
            emailError = "E-posta boş bırakılamaz."
            return
        }
        guard isEmailValid else {
            emailError = "Lütfen geçerli bir e-posta formatı girin."
            return
        }
        isLoading = true

        Task {
            try? await Task.sleep(nanoseconds: 500_000_000)
            DispatchQueue.main.async {
                self.isLoading = false
                self.isLoggedIn = true  
            }
        }
    }
    
    func resendOTP() async {
        guard let userID = registeredUserID,
              let url = URL(string: "http://192.168.1.8:4000/auth/resend-otp") else { return }
        
        let requestBody: [String: Any] = [
            "user_id": userID
        ]
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: requestBody)
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            print("Resend OTP:", (response as? HTTPURLResponse)?.statusCode ?? 0)
            if let json = try? JSONSerialization.jsonObject(with: data) {
                print("Resend response:", json)
            }
        } catch {
            print("Resend OTP request error:", error)
        }
    }
    
    func verifyEmail(otpCode: String) async -> Bool {
        guard let userID = registeredUserID,
              let url = URL(string: "http://192.168.1.8:4000/auth/verify-email") else {
            return false
        }
        let requestBody: [String: Any] = [
            "user_id": userID,
            "code": otpCode
        ]
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: requestBody)
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            let statusCode = (response as? HTTPURLResponse)?.statusCode ?? 0
            print("Verify status code:", statusCode)
            
            if statusCode == 200 {
                return true
            } else {
                if let json = try? JSONSerialization.jsonObject(with: data) {
                    print("Verify error:", json)
                }
            }
        } catch {
            print("Verify email request error:", error)
        }
        return false
    }
    
    func signInWithGoogle() {
        guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
              let rootVC = windowScene.windows.first?.rootViewController
        else { return }

        guard let clientID = Bundle.main.object(forInfoDictionaryKey: "CLIENT_ID") as? String else {
            fatalError("CLIENT_ID missing in Info.plist")
        }
        let config = GIDConfiguration(clientID: clientID)
        GIDSignIn.sharedInstance.configuration = config

        GIDSignIn.sharedInstance.signIn(withPresenting: rootVC) { result, error in
            guard error == nil,
                  let user = result?.user,
                  let tokenString = user.idToken?.tokenString
            else {
                if let error = error {
                    print("Google Sign-In error: \(error.localizedDescription)")
                }
                return
            }
            
            Task { await self.sendGoogleToken(tokenString) }
        }
    }
    
    private func sendGoogleToken(_ idToken: String) async {
        guard let url = URL(string: "http://192.168.1.8:4000/auth/google") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        let body = ["id_token": idToken]
        request.httpBody = try? JSONSerialization.data(withJSONObject: body)
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            if let httpResp = response as? HTTPURLResponse {
                print("Google response status: \(httpResp.statusCode)")
            }
            if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] {
                print("Server response:", json)
                
                if let successValue = json["success"] as? Int, successValue == 1 {
                }
                else if let successValue = json["success"] as? Int, successValue == 0,
                        let errorMessage = json["error"] as? String,
                        errorMessage == "User incomplete, please complete your profile",
                        let userID = json["user_id"] as? Int {
                    self.googleProfileIncompleteUserID = userID
                    self.showPhoneNumberEntry = true
                }
            }
        } catch {
            print("Google request failed:", error)
        }
    }
    
    func completeProfile(userID: Int, phoneNumber: String) async -> Bool {
        guard let url = URL(string: "http://192.168.1.8:4000/auth/complete-profile") else {
            return false
        }
        let requestBody: [String: Any] = [
            "user_id": userID,
            "phone_number": phoneNumber
        ]
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: requestBody)
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            guard let httpResp = response as? HTTPURLResponse else { return false }
            print("completeProfile status code:", httpResp.statusCode)
            
            if httpResp.statusCode == 200 || httpResp.statusCode == 201 {
                if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let success = json["success"] as? Bool, success == true {
                    return true
                }
            } else {
                print("completeProfile failed with code \(httpResp.statusCode)")
            }
        } catch {
            print("completeProfile error:", error)
        }
        return false
    }
}



================================================
File: YeniParaMobile/Views/HomeView.swift
================================================

import SwiftUI

struct HomeView: View {
    @ObservedObject var authVM: AuthViewModel

    @State private var symbols: [String] = []
    @State private var isLoading = false

    var body: some View {
        NavigationStack {
            Group {
                if isLoading {
                    ProgressView("Semboller yükleniyor…")
                } else {
                    List(symbols, id: \.self) { sym in
                        NavigationLink(value: sym) {
                            Text(sym)
                                .padding(.vertical, 8)
                        }
                    }
                    .listStyle(.plain)
                }
            }
            .navigationTitle("Semboller")
            .navigationDestination(for: String.self) { sym in
                SymbolDetailView(symbol: sym)
            }
            .onAppear { Task { await fetchSymbols() } }
        }
    }

    private func fetchSymbols() async {
        isLoading = true
        defer { isLoading = false }
        guard let url = URL(string: "http://localhost:4000/symbols") else { return }
        do {
            let (data, _) = try await URLSession.shared.data(from: url)
            struct Resp: Decodable { let data: [String] }
            let resp = try JSONDecoder().decode(Resp.self, from: data)
            // ".US" uzantısını at
            symbols = resp.data.map { $0.replacingOccurrences(of: ".US", with: "") }
        } catch {
            print("Sembol yükleme hatası:", error)
        }
    }
}



================================================
File: YeniParaMobile/Views/SymbolDetailView.swift
================================================

import SwiftUI
import Charts

struct HistoricalResponse: Decodable {
    let data: [CandleAPIModel]
}

struct CandleAPIModel: Decodable {
    let timestamp: String
    let open: Double
    let high: Double
    let low: Double
    let close: Double
    let volume: Double
}

struct CandleData: Identifiable {
    let id = UUID()
    let timestamp: Date
    let open, high, low, close, volume: Double
}

struct SymbolDetailView: View {
    let symbol: String

    @State private var candles: [CandleData] = []
    @State private var isLoading = false

    var body: some View {
        VStack {
            if isLoading {
                ProgressView("Veriler yükleniyor…")
            } else if candles.isEmpty {
                Text("Veri yok.")
                    .foregroundColor(.secondary)
            } else {
                Chart(candles) { c in
                    LineMark(
                        x: .value("Tarih", c.timestamp),
                        y: .value("Kapanış", c.close)
                    )
                    .interpolationMethod(.catmullRom)
                }
                .chartXAxis {
                    AxisMarks(values: .automatic(desiredCount: 5)) { _ in
                        AxisGridLine(); AxisTick()
                        AxisValueLabel(format: .dateTime.month().day())
                    }
                }
                .frame(height: 300)
                .padding()

                List(candles) { c in
                    HStack {
                        Text(c.timestamp, format: .dateTime.day().month().year())
                        Spacer()
                        Text(c.close, format: .number.precision(.fractionLength(2)))
                    }
                }
                .listStyle(.plain)
            }
        }
        .navigationTitle(symbol)
        .onAppear { Task { await fetchCandles() } }
    }

    private func fetchCandles() async {
        isLoading = true
        defer { isLoading = false }

        let symParam = symbol + ".US"
        var comp = URLComponents(string: "http://localhost:4000/candles/1d")!
        comp.queryItems = [
            .init(name: "symbol", value: symParam),
            .init(name: "limit", value: "100000")
        ]
        guard let url = comp.url else { return }

        do {
            let (data, _) = try await URLSession.shared.data(from: url)
            let resp = try JSONDecoder().decode(HistoricalResponse.self, from: data)
            let iso = ISO8601DateFormatter()
            candles = resp.data.compactMap { api in
                guard let d = iso.date(from: api.timestamp) else { return nil }
                return CandleData(
                    timestamp: d,
                    open: api.open,
                    high: api.high,
                    low: api.low,
                    close: api.close,
                    volume: api.volume
                )
            }
            .sorted { $0.timestamp < $1.timestamp }
        } catch {
            print("Candle yükleme hatası:", error)
        }
    }
}



================================================
File: YeniParaMobile/Views/TabBarView.swift
================================================
import SwiftUI

struct TabBarView: View {
    @ObservedObject var authVM: AuthViewModel

    var body: some View {
        TabView {
            HomeView(authVM: authVM)
                .tabItem {
                    Image(systemName: "house.fill")
                    Text("Home")
                }

            Text("Diğer")
                .tabItem {
                    Image(systemName: "ellipsis.circle")
                    Text("Diğer")
                }
        }
    }
}

struct TabBarView_Previews: PreviewProvider {
    static var previews: some View {
        TabBarView(authVM: AuthViewModel())
    }
}


================================================
File: YeniParaMobile/Views/Common/ButtonStyle.swift
================================================
import SwiftUI

struct PrimaryButtonStyle: ButtonStyle {
    var background: Color
    var foreground: Color

    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .font(.headline)
            .foregroundColor(foreground)
            .padding()
            .frame(maxWidth: .infinity)
            .background(background)
            .cornerRadius(8)
            .opacity(configuration.isPressed ? 0.7 : 1)
    }
}



================================================
File: YeniParaMobile/Views/Common/InputField.swift
================================================
import SwiftUI

struct InputField: View {
    @Binding var text: String
    var placeholder: String

    var body: some View {
        TextField(placeholder, text: $text)
            .keyboardType(.emailAddress)
            .autocapitalization(.none)
            .disableAutocorrection(true)
            .padding(.vertical, 12)
            .padding(.horizontal, 16)
            .background(Color.white.opacity(0.1))
            .foregroundColor(.white)
            .overlay(
                RoundedRectangle(cornerRadius: 8)
                    .stroke(Color.white.opacity(0.6), lineWidth: 1)
            )
            .frame(maxWidth: .infinity)
    }
}

struct InputField_Previews: PreviewProvider {
    @State static var val = ""
    static var previews: some View {
        InputField(text: $val, placeholder: "E‑Posta")
            .padding()
            .previewLayout(.sizeThatFits)
    }
}



================================================
File: YeniParaMobile/Views/Common/LogoView.swift
================================================
import SwiftUI

struct LogoView: View {
    var body: some View {
        Image(systemName: "chart.bar.fill")
            .resizable()
            .scaledToFit()
            .frame(width: 60, height: 60)
            .foregroundColor(.green)
    }
}



================================================
File: YeniParaMobile/Views/Common/PrimaryButton.swift
================================================
import SwiftUI

struct PrimaryButton: View {
    let title: String
    let action: () -> Void
    var background: Color = .green
    var foreground: Color = .white

    var body: some View {
        Button(action: action) {
            Text(title)
                .font(.headline)
                .foregroundColor(foreground)
                .frame(maxWidth: CGFloat.infinity)
                .padding()
                .background(background)
                .cornerRadius(8)
        }
    }
}

struct PrimaryButton_Previews: PreviewProvider {
    static var previews: some View {
        PrimaryButton(title: "Test", action: {})
            .padding()
            .previewLayout(.sizeThatFits)
    }
}



================================================
File: YeniParaMobile/Views/Common/SocialButton.swift
================================================
import SwiftUI

struct SocialButton: View {
    let imageName: String
    let title: String
    let action: () -> Void

    var body: some View {
        Button(action: action) {
            HStack(spacing: 12) {
                Image(imageName)
                    .resizable()
                    .scaledToFit()
                    .frame(width: 20, height: 20)
                Text(title)
                    .font(.body).bold()
            }
            .foregroundColor(.white)
            .padding(.vertical, 12)
            .frame(maxWidth: .infinity)
            .overlay(
                RoundedRectangle(cornerRadius: 8)
                    .stroke(Color.white.opacity(0.6), lineWidth: 1)
            )
        }
    }
}

struct SocialButton_Previews: PreviewProvider {
    static var previews: some View {
        SocialButton(imageName: "google-logo",
                     title: "Google ile devam et",
                     action: {})
            .padding()
            .previewLayout(.sizeThatFits)
    }
}



================================================
File: YeniParaMobile.xcodeproj/project.pbxproj
================================================
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 77;
	objects = {

/* Begin PBXBuildFile section */
		5731EFFD2DB8CE7C003F9732 /* GoogleSignIn in Frameworks */ = {isa = PBXBuildFile; productRef = 5731EFFC2DB8CE7C003F9732 /* GoogleSignIn */; };
		5731EFFF2DB8CE7C003F9732 /* GoogleSignInSwift in Frameworks */ = {isa = PBXBuildFile; productRef = 5731EFFE2DB8CE7C003F9732 /* GoogleSignInSwift */; };
/* End PBXBuildFile section */

/* Begin PBXFileReference section */
		579FDABF2DB55DBF002C0A46 /* YeniParaMobile.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = YeniParaMobile.app; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFileSystemSynchronizedBuildFileExceptionSet section */
		5731F0042DB8D06D003F9732 /* Exceptions for "YeniParaMobile" folder in "YeniParaMobile" target */ = {
			isa = PBXFileSystemSynchronizedBuildFileExceptionSet;
			membershipExceptions = (
				Info.plist,
			);
			target = 579FDABE2DB55DBF002C0A46 /* YeniParaMobile */;
		};
/* End PBXFileSystemSynchronizedBuildFileExceptionSet section */

/* Begin PBXFileSystemSynchronizedRootGroup section */
		579FDAC12DB55DBF002C0A46 /* YeniParaMobile */ = {
			isa = PBXFileSystemSynchronizedRootGroup;
			exceptions = (
				5731F0042DB8D06D003F9732 /* Exceptions for "YeniParaMobile" folder in "YeniParaMobile" target */,
			);
			path = YeniParaMobile;
			sourceTree = "<group>";
		};
/* End PBXFileSystemSynchronizedRootGroup section */

/* Begin PBXFrameworksBuildPhase section */
		579FDABC2DB55DBF002C0A46 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				5731EFFD2DB8CE7C003F9732 /* GoogleSignIn in Frameworks */,
				5731EFFF2DB8CE7C003F9732 /* GoogleSignInSwift in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		579FDAB62DB55DBF002C0A46 = {
			isa = PBXGroup;
			children = (
				579FDAC12DB55DBF002C0A46 /* YeniParaMobile */,
				579FDAC02DB55DBF002C0A46 /* Products */,
			);
			sourceTree = "<group>";
		};
		579FDAC02DB55DBF002C0A46 /* Products */ = {
			isa = PBXGroup;
			children = (
				579FDABF2DB55DBF002C0A46 /* YeniParaMobile.app */,
			);
			name = Products;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		579FDABE2DB55DBF002C0A46 /* YeniParaMobile */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 579FDACA2DB55DC0002C0A46 /* Build configuration list for PBXNativeTarget "YeniParaMobile" */;
			buildPhases = (
				579FDABB2DB55DBF002C0A46 /* Sources */,
				579FDABC2DB55DBF002C0A46 /* Frameworks */,
				579FDABD2DB55DBF002C0A46 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			fileSystemSynchronizedGroups = (
				579FDAC12DB55DBF002C0A46 /* YeniParaMobile */,
			);
			name = YeniParaMobile;
			packageProductDependencies = (
				5731EFFC2DB8CE7C003F9732 /* GoogleSignIn */,
				5731EFFE2DB8CE7C003F9732 /* GoogleSignInSwift */,
			);
			productName = YeniParaMobile;
			productReference = 579FDABF2DB55DBF002C0A46 /* YeniParaMobile.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		579FDAB72DB55DBF002C0A46 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastSwiftUpdateCheck = 1630;
				LastUpgradeCheck = 1630;
				TargetAttributes = {
					579FDABE2DB55DBF002C0A46 = {
						CreatedOnToolsVersion = 16.3;
					};
				};
			};
			buildConfigurationList = 579FDABA2DB55DBF002C0A46 /* Build configuration list for PBXProject "YeniParaMobile" */;
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 579FDAB62DB55DBF002C0A46;
			minimizedProjectReferenceProxies = 1;
			packageReferences = (
				5731EFFB2DB8CE7C003F9732 /* XCRemoteSwiftPackageReference "GoogleSignIn-iOS" */,
			);
			preferredProjectObjectVersion = 77;
			productRefGroup = 579FDAC02DB55DBF002C0A46 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				579FDABE2DB55DBF002C0A46 /* YeniParaMobile */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		579FDABD2DB55DBF002C0A46 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		579FDABB2DB55DBF002C0A46 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		579FDAC82DB55DC0002C0A46 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 18.4;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "DEBUG $(inherited)";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		579FDAC92DB55DC0002C0A46 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 18.4;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		579FDACB2DB55DC0002C0A46 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS = NO;
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_TEAM = 78K43KK246;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_FILE = YeniParaMobile/Info.plist;
				INFOPLIST_KEY_UIApplicationSceneManifest_Generation = YES;
				INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents = YES;
				INFOPLIST_KEY_UILaunchScreen_Generation = YES;
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPad = "UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPhone = "UIInterfaceOrientationPortrait UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.yeni.para.YeniParaMobile;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		579FDACC2DB55DC0002C0A46 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS = NO;
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				DEVELOPMENT_TEAM = 78K43KK246;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_FILE = YeniParaMobile/Info.plist;
				INFOPLIST_KEY_UIApplicationSceneManifest_Generation = YES;
				INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents = YES;
				INFOPLIST_KEY_UILaunchScreen_Generation = YES;
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPad = "UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				INFOPLIST_KEY_UISupportedInterfaceOrientations_iPhone = "UIInterfaceOrientationPortrait UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.yeni.para.YeniParaMobile;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		579FDABA2DB55DBF002C0A46 /* Build configuration list for PBXProject "YeniParaMobile" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				579FDAC82DB55DC0002C0A46 /* Debug */,
				579FDAC92DB55DC0002C0A46 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		579FDACA2DB55DC0002C0A46 /* Build configuration list for PBXNativeTarget "YeniParaMobile" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				579FDACB2DB55DC0002C0A46 /* Debug */,
				579FDACC2DB55DC0002C0A46 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */

/* Begin XCRemoteSwiftPackageReference section */
		5731EFFB2DB8CE7C003F9732 /* XCRemoteSwiftPackageReference "GoogleSignIn-iOS" */ = {
			isa = XCRemoteSwiftPackageReference;
			repositoryURL = "https://github.com/google/GoogleSignIn-iOS";
			requirement = {
				kind = upToNextMajorVersion;
				minimumVersion = 8.0.0;
			};
		};
/* End XCRemoteSwiftPackageReference section */

/* Begin XCSwiftPackageProductDependency section */
		5731EFFC2DB8CE7C003F9732 /* GoogleSignIn */ = {
			isa = XCSwiftPackageProductDependency;
			package = 5731EFFB2DB8CE7C003F9732 /* XCRemoteSwiftPackageReference "GoogleSignIn-iOS" */;
			productName = GoogleSignIn;
		};
		5731EFFE2DB8CE7C003F9732 /* GoogleSignInSwift */ = {
			isa = XCSwiftPackageProductDependency;
			package = 5731EFFB2DB8CE7C003F9732 /* XCRemoteSwiftPackageReference "GoogleSignIn-iOS" */;
			productName = GoogleSignInSwift;
		};
/* End XCSwiftPackageProductDependency section */
	};
	rootObject = 579FDAB72DB55DBF002C0A46 /* Project object */;
}



================================================
File: YeniParaMobile.xcodeproj/project.xcworkspace/contents.xcworkspacedata
================================================
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>



================================================
File: YeniParaMobile.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
================================================
{
  "originHash" : "68aa00e3cba36db2e0a76f54dbc84d1f079d8aa9a19bfa9fce02d6286bd620b7",
  "pins" : [
    {
      "identity" : "app-check",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/app-check.git",
      "state" : {
        "revision" : "61b85103a1aeed8218f17c794687781505fbbef5",
        "version" : "11.2.0"
      }
    },
    {
      "identity" : "appauth-ios",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/openid/AppAuth-iOS.git",
      "state" : {
        "revision" : "2781038865a80e2c425a1da12cc1327bcd56501f",
        "version" : "1.7.6"
      }
    },
    {
      "identity" : "googlesignin-ios",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/GoogleSignIn-iOS",
      "state" : {
        "revision" : "65fb3f1aa6ffbfdc79c4e22178a55cd91561f5e9",
        "version" : "8.0.0"
      }
    },
    {
      "identity" : "googleutilities",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/GoogleUtilities.git",
      "state" : {
        "revision" : "53156c7ec267db846e6b64c9f4c4e31ba4cf75eb",
        "version" : "8.0.2"
      }
    },
    {
      "identity" : "gtm-session-fetcher",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/gtm-session-fetcher.git",
      "state" : {
        "revision" : "a2ab612cb980066ee56d90d60d8462992c07f24b",
        "version" : "3.5.0"
      }
    },
    {
      "identity" : "gtmappauth",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/GTMAppAuth.git",
      "state" : {
        "revision" : "5d7d66f647400952b1758b230e019b07c0b4b22a",
        "version" : "4.1.1"
      }
    },
    {
      "identity" : "promises",
      "kind" : "remoteSourceControl",
      "location" : "https://github.com/google/promises.git",
      "state" : {
        "revision" : "540318ecedd63d883069ae7f1ed811a2df00b6ac",
        "version" : "2.4.0"
      }
    }
  ],
  "version" : 3
}





================================================
File: YeniParaMobile.xcodeproj/xcuserdata/fevzisahinler.xcuserdatad/xcschemes/xcschememanagement.plist
================================================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>SchemeUserState</key>
	<dict>
		<key>YeniParaMobile.xcscheme_^#shared#^_</key>
		<dict>
			<key>orderHint</key>
			<integer>0</integer>
		</dict>
	</dict>
</dict>
</plist>


